# task type, support train and predict
task = train

# boosting type, support gbdt for now, alias: boosting, boost
boosting_type = gbdt

# application type, support following application
# regression , regression task
# binary , binary classification task
# lambdarank , LambdaRank task
# multiclass
# alias: application, app
objective = lambdarank 

# eval metrics, support multi metric, delimited by ',' , support following metrics
# l1 
# l2 , default metric for regression
# ndcg , default metric for lambdarank
# auc 
# binary_logloss , default metric for binary
# binary_error
# multi_logloss
# multi_error
# auc_mu
metric = ndcg
query = 0
ndcg_eval_at = "1,3,5"
label_gain = "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200"


# AUC-mu weights; the matrix of loss weights below is passed in parameter auc_mu_weights as a list
#  0  1  2  3  4
#  5  0  6  7  8
#  9 10  0 11 12
# 13 14 15  0 16
# 17 18 19 20  0
# auc_mu_weights = 0,1,2,3,4,5,0,6,7,8,9,10,0,11,12,13,14,15,0,16,17,18,19,20,0

# number of class, for multiclass classification

# frequency for metric output
metric_freq = 1

# true if need output metric for training data, alias: tranining_metric, train_metric
is_training_metric = true

# column in data to use as label
# label_column = 13

# number of bins for feature bucket, 255 is a recommend setting, it can save memories, and also has good accuracy. 
max_bin = 63

# training data
# if existing weight file, should name to "regression.train.weight"
# alias: train_data, train
# data = clean_input_parts_0
data = /mnt/chjinche/data/debug_two_round/File_0.txt

# valid_data = /mnt/chjinche/data/debug_model_diff/top_25000.tsv

# transform
# transform_file = /mnt/chjinche/data/debug_model_diff/SmoothedTrainInputIniAddQueryId

# header
# header_file = /mnt/chjinche/data/debug_model_diff/HRSTrainHeader.tsv

use_two_round_loading = True

# valid data

# round for early stopping
early_stopping = 10

# number of trees(iterations), alias: num_tree, num_iteration, num_iterations, num_round, num_rounds
num_trees = 10

# shrinkage rate , alias: shrinkage_rate
learning_rate = 0.12

# number of leaves for one tree, alias: num_leaf
num_leaves = 120

min_data_in_leaf = 4000

feature_fraction = 0.15

deterministic = True
force_col_wise = True

# ignore_column=15,16,17,18,19,20
# categorical_feature=15,16,17,18,19,20